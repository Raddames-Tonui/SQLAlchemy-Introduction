
#  FOLDER STRUCTURE
# my_flask_app/
# │
# ├── app.py              # Main application file
# ├── models.py           # Database models
# ├── config.py           # Configuration settings (optional)
# ├── requirements.txt    # Python dependencies
# ├── migrations/         # Database migrations folder (auto-generated by Flask-Migrate)
# │
# └── __init__.py         # Initialize the application (optional)

from flask import Flask, jsonify, request
from flask_migrate import Migrate
from models import db, Students, Course  # Import the models and database object

# Initialize the Flask application
app = Flask(__name__)

# Configure the SQLAlchemy part of the app instance
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///school.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Add this line to disable SQLAlchemy event system which is unnecessary

migrate = Migrate(app, db)   # Bind the Migrate object to the app and db
db.init_app(app)             # Initialize the app with the db instance

@app.route('/')
def hello_world():
    return 'Hello, World!'

@app.route('/v1/students/<string:username>')
def user(username):
    return f"Hello {username}"

# Sample student list
# students = ["John", Raddames", "June", "Andrew", "Brian"]
# @app.route('/students/<int:id>', methods=['GET']) # /students/<int:id> used to pass dynamic numbers 
# def fetch_student(id):
#     if id < 0 or id >= len(students):
#         return jsonify({"message": "No such student"}), 404
#     return jsonify(students[id]), 200

# ----------------FETCHING ALL STUDENTS ----------------
@app.route('/students', methods=['GET'])
def fetch_students():
    students = Students.query.all()
    # student_list = []
    # for student in students:
    #     student_list.append({'id': student.id, 'name': student.name, 'email': student.email, 'age': student.age})
    # print(students)
    # using LIST COMPREHENSION
    # student_list = [{'id': student.id, 'name': student.name, 'email': student.email, 'age': student.age} for student in students]
    student_list = [student.to_dict() for student in students]
    return jsonify(student_list), 200

# ----------------FETCHING A STUDENT BY ID ----------------
@app.route('/students/<int:id>', methods=['GET'])
def fetch_student_by_id(id):
    student = Students.query.get_or_404(id)
    return jsonify(student.to_dict()), 200

# ----------------ADDING A NEW STUDENT ----------------
@app.route('/students', methods=['POST'])
def add_student():
    data = request.get_json()
        # ********VALIDATIONS********
    if ('age'not in data or not data['name']) or ('age'not in data or not data['age'])  or ('email'not in data or not data['email']):
        return jsonify({"message": "All fields are required"}), 400 
   
    email_exist = Students.query.filter_by(email=data['email']).first()
    if email_exist:
        return jsonify({"message": "Email already exists"}), 409
    if data['age'] < 18 or data['age'] > 100:
        return jsonify({"message": "Age must be between 18 and 100"}), 400
    
    try: # if @ is not at email
        new_student = Students(name=data['name'], age=data['age'], email=data['email'])

        db.session.add(new_student)
        db.session.commit()
        return jsonify({"Success": "Student added successfully!"}), 201
    except:
        return jsonify({"message": "An error occurred while adding the student"}), 500
    
# ----------------UPDATING A STUDENT BY ID ----------------
@app.route('/students/<int:id>', methods=["PUT"])
def update_student(id):
    student = Students.query.get_or_404(id)  # getting the student to be updated
    data = request.get_json()  # getting the data being entered
            # ********VALIDATIONS********
    if ('age'not in data or not data['name']) or ('age'not in data or not data['age'])  or ('email'not in data or not data['email']):
        return jsonify({"message": "All fields are required"}), 400 
   
    email_exist = Students.query.filter_by(email=data['email']).first()
    if email_exist:
        return jsonify({"message": "Email already exists"}), 409
    if data['age'] < 18 or data['age'] > 100:
        return jsonify({"message": "Age must be between 18 and 100"}), 400
    try:
        student.name = data["name"]
        student.age = data["age"]
        student.email = data["email"]

        db.session.commit()
        return jsonify({"Success": "Student updated successfully!"}), 200
    except:
        return jsonify({"message": "An error occurred while updating the student"}), 500
    
# ----------------DELETING A STUDENT BY ID ----------------
@app.route('/students/<int:id>', methods=["DELETE"])
def delete_student(id):
    student = Students.query.get_or_404(id)
    student_courses = Course.query.filter_by(student_id=id).all()
    for course in student_courses:
        db.session.delete(course)
    db.session.delete(student)
    db.session.commit()
    return jsonify({"Success": "Student deleted successfully!"}), 200


# ----------------COURSES----------------
@app.route('/courses', methods=['GET'])
def fetch_courses():
    courses = Course.query.all()
    course_list = [courses.to_dict() for courses in courses]
    return jsonify(course_list), 200

# We run a development server through treating our application module as a script with the app.run() method:
if __name__ == "__main__":
    app.run(debug=True)  # for debugging purposes, it will auto reload the code
